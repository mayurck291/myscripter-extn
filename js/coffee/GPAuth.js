// Generated by CoffeeScript 1.7.1
(function() {
  var AuthModule, GPauth;

  GPauth = (function() {
    function GPauth($http, $q) {
      this.$http = $http;
      this.$q = $q;
      console.log("INITIALIZED GPauth", arguments);
      this.START_STATE = 1;
      this.STATE_ACQUIRING_AUTH_TOKEN = 2;
      this.STATE_AUTH_TOKEN_ACQUIRED = 3;
      this.state = this.START_STATE;
      this.authenticationURL = 'https://www.googleapis.com/plus/v1/people/me?fields=aboutMe,circledByCount,displayName,emails,image';
    }

    GPauth.prototype.getState = function() {
      return this.state;
    };

    GPauth.prototype.getToken = function(interactive) {
      var defer, option;
      console.log("GPauth GETTING TOKEN");
      defer = this.$q.defer();
      this.state = this.STATE_ACQUIRING_AUTH_TOKEN;
      option = {
        interactive: interactive
      };
      chrome.identity.getAuthToken(option, (function(_this) {
        return function(accessToken) {
          if (chrome.runtime.lastError) {
            console.log("Error: ", chrome.runtime.lastError);
            defer.reject(chrome.runtime.lastError);
          } else {
            console.log("accessToken: ", accessToken);
            _this.accessToken = accessToken;
            defer.resolve();
          }
        };
      })(this));
      return defer.promise;
    };

    GPauth.prototype.requestUserData = function() {
      var config, defer;
      console.log("GPauth REQUESTING USER DATA");
      defer = this.$q.defer();
      this.retry = true;
      config = {
        headers: {
          "Authorization": "Bearer " + this.accessToken
        }
      };
      this.$http.get(this.authenticationURL, config).success((function(_this) {
        return function(response, status) {
          if (status === 200) {
            _this.state = _this.STATE_AUTH_TOKEN_ACQUIRED;
            defer.resolve(response);
          } else {
            _this.state = _this.START_STATE;
            defer.reject(response);
          }
        };
      })(this)).error((function(_this) {
        return function(response, status) {
          if (_this.retry && status === 401) {
            chrome.identity.removeCachedAuthToken({
              token: _this.accessToken
            }, _this.getToken);
            _this.retry = false;
          }
        };
      })(this));
      return defer.promise;
    };

    GPauth.prototype.getUserInfo = function(interactive) {
      var defer;
      console.log("GPauth GET USER DATA");
      defer = this.$q.defer();
      this.requestUserData().then(defer.resolve, defer.reject);
      return defer.promise;
    };

    GPauth.prototype.signIn = function() {
      var defer;
      console.log("GPauth signIn");
      defer = this.$q.defer();
      this.getToken(true).then(defer.resolve, defer.reject);
      return defer.promise;
    };

    GPauth.prototype.signOut = function() {
      var defer, option, url;
      console.log("GPauth signOut");
      defer = this.$q.defer();
      option = {
        token: this.accessToken
      };
      chrome.identity.removeCachedAuthToken(option, defer.resolve);
      url = "https://accounts.google.com/o/oauth2/revoke?token=" + this.accessToken;
      this.$http.get(url);
      this.state = this.START_STATE;
      return defer.promise;
    };

    GPauth.prototype.load = function() {
      var defer;
      console.log("GPauth LOAD");
      defer = this.$q.defer();
      this.getToken(false).then(defer.resolve, defer.reject);
      return defer.promise;
    };

    return GPauth;

  })();

  AuthModule = angular.module('AuthModule', []);

  AuthModule.service('GPauth', ["$http", "$q", GPauth]);

}).call(this);
