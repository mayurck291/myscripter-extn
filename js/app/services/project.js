// Generated by CoffeeScript 1.3.3
(function() {
  var MonkeyWrench, Project;

  Project = (function() {

    function Project(Alert) {
      this.Alert = Alert;
    }

    Project.prototype["new"] = function() {
      var template;
      return template = {
        name: null,
        url: null,
        external: {
          js: [],
          css: []
        },
        js: null,
        css: null,
        enabled: true,
        autoApply: false,
        forked: false
      };
    };

    Project.prototype.nextSequence = function() {
      var seq;
      seq = localStorage.getItem('sequence');
      if (seq != null) {
        localStorage.set('sequence', seq + 1);
        return seq;
      } else {
        localStorage.set('sequence', 2);
        return 1;
      }
    };

    Project.prototype.getIndices = function() {
      var indexes;
      indexes = localStorage.get('prjmyindexes_9');
      if (indexes != null) {
        return indexes;
      } else {
        return {};
      }
    };

    Project.prototype.saveIndices = function(indexes) {
      return localStorage.setItem('prjmyindexes_9', indexes);
    };

    Project.prototype.saveProject = function(id, project) {
      localStorage.setItem(id, project);
      return this.Alert.success("Hurrah.!! Project saved successfully");
    };

    Project.prototype.save = function(project, old_url) {
      var all_indexes, cur_url;
      if (!(project.id != null)) {
        project.id = nextSequence();
      }
      saveProject(project.id, project);
      all_indexes = this.getIndices();
      cur_url = project.url;
      if (!(all_indexes[cur_url] != null)) {
        all_indexes[cur_url] = [];
      }
      if (!(old_url != null)) {
        old_url = cur_url;
      }
      if (all_indexes[cur_url].indexOf(project.id) === -1) {
        all_indexes[cur_url].push(project.id);
      }
      if (cur_url !== old_url && all_indexes[old_url] && all_indexes[old_url].indexOf(project.id) > -1) {
        all_indexes[old_url].splice(all_indexes[old_url].indexOf(project.id), 1);
      }
      saveIndices(all_indexes);
    };

    Project.prototype.delete_project = function(project) {
      var all_indexes;
      all_indexes = getIndices();
      localStorage.removeItem(project.id);
      all_indexes[project.url].splice(all_indexes[project.url].indexOf($scope.cur_project.id), 1);
      saveIndices(all_indexes);
    };

    Project.prototype.get_project = function(id) {
      return localStorage.getItem(id);
    };

    Project.prototype.get_all_projects = function() {
      var projects;
      projects = localStorage.getItem('prjmyscripts_9');
      if (projects !== null && projects !== void 0) {
        return localStorage.getItem('prjmyscripts_9');
      } else {
        return {};
      }
    };

    return Project;

  })();

  MonkeyWrench = angular.module('MonkeyWrench');

  MonkeyWrench.service('Project', ['Alert', Project]);

}).call(this);
