// Generated by CoffeeScript 1.3.3
(function() {
  var MonkeyWrench, NewProjectController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MonkeyWrench = angular.module('MonkeyWrench');

  NewProjectController = (function() {

    NewProjectController.$inject = ['$scope', '$routeParams', '$timeout', 'Baazar', 'Project', 'Alert'];

    function NewProjectController(scope, routeParams, timeout, Baazar, Project, Alert) {
      var _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.timeout = timeout;
      this.Baazar = Baazar;
      this.Project = Project;
      this.Alert = Alert;
      this.addcss = __bind(this.addcss, this);

      this.removecss = __bind(this.removecss, this);

      this.addjs = __bind(this.addjs, this);

      this.removejs = __bind(this.removejs, this);

      this.save = __bind(this.save, this);

      this.scope.curProject = this.Project["new"]();
      this.timeout(function() {
        var cbtab, tabs;
        tabs = document.getElementById('form');
        return cbtab = new CBPFWTabs(tabs);
      }, 100, true);
      this.scope.save = this.save;
      this.scope.removecss = this.removecss;
      this.scope.removejs = this.removejs;
      this.scope.addjs = this.addjs;
      this.scope.addcss = this.addcss;
      this.scope.$on('save', this.save);
      return;
    }

    NewProjectController.prototype.save = function() {
      if (this.scope.curProject.name === null || this.scope.curProject.url === null) {
        this.Alert.error("Recipe Name and URL can't be empty..");
        return;
      }
      console.log("saving....");
      this.Project.save(angular.copy(this.scope.curProject));
      return this.Alert.success("Hurrah....project saved...");
    };

    NewProjectController.prototype.removejs = function(index) {
      return this.scope.curProject.external.js.splice(index, 1);
    };

    NewProjectController.prototype.addjs = function() {
      if (this.scope.curProject.external.js.indexOf(this.scope.extjs) === -1 && this.scope.extjs !== null && this.scope.extjs !== void 0) {
        this.scope.curProject.external.js.push(this.scope.extjs);
      }
      return this.scope.extjs = null;
    };

    NewProjectController.prototype.removecss = function(index) {
      return this.scope.curProject.external.css.splice(index, 1);
    };

    NewProjectController.prototype.addcss = function() {
      if (this.scope.curProject.external.css.indexOf(this.scope.extcss) === -1 && this.scope.extcss !== null && this.scope.extcss !== void 0) {
        this.scope.curProject.external.css.push(this.scope.extcss);
      }
      return this.scope.extcss = null;
    };

    return NewProjectController;

  })();

  MonkeyWrench.controller('NewProjectController', NewProjectController);

}).call(this);
