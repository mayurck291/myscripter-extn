// Generated by CoffeeScript 1.3.3
(function() {
  var MonkeyWrench, ShareProjectController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MonkeyWrench = angular.module('MonkeyWrench');

  ShareProjectController = (function() {

    ShareProjectController.$inject = ['$scope', '$routeParams', '$location', '$timeout', 'GPauth', 'Baazar', 'Project', 'Alert'];

    function ShareProjectController(scope, routeParams, location, timeout, gp, Baazar, Project, Alert) {
      var pid,
        _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.location = location;
      this.timeout = timeout;
      this.gp = gp;
      this.Baazar = Baazar;
      this.Project = Project;
      this.Alert = Alert;
      this.deleteUserInfo = __bind(this.deleteUserInfo, this);

      this.getUserInfo = __bind(this.getUserInfo, this);

      pid = this.routeParams.pid;
      if (pid !== null && pid !== void 0) {
        this.config = angular.copy(this.Project.get(pid));
      } else {
        this.location.path('/');
      }
      if (this.config === null || this.config === void 0) {
        this.location.path('/');
      }
      if (this.config.forked) {
        this.location.path('/');
        this.Alert.error('Opps...can not share installed Recipe...instead FORK it and then make it AWESOME.');
      }
      this.scope.$on('login', function() {
        return _this.getUserInfo();
      });
      this.scope.$on('logout', function() {
        return _this.deleteUserInfo();
      });
      this.gp.load().then(function() {
        return _this.getUserInfo();
      }, function() {
        _this.user = null;
        _this.signedIn = false;
        _this.Alert.error("You must LOG IN in-order to share Recipe.");
        return _this.location.path('/');
      });
      this.disableShareButton = false;
      return;
    }

    ShareProjectController.prototype.isEmpty = function(value) {
      return [null, void 0, ""].indexOf(value) > -1;
    };

    ShareProjectController.prototype.isDisabled = function() {
      if (this.isEmpty(this.config.name) || this.isEmpty(this.config.desc) || this.disableShareButton) {
        return true;
      } else {
        return false;
      }
    };

    ShareProjectController.prototype.resetFileInput = function() {
      var _this = this;
      return this.timeout(function() {
        return _this.location.path('/');
      }, 1000);
    };

    ShareProjectController.prototype.handle_response = function(response) {
      this.Alert.success(response.msg);
      this.updateRecipeId(response._id);
      return this.resetFileInput();
    };

    ShareProjectController.prototype.updateRecipeId = function(recipeId) {
      this.config['_id'] = recipeId;
      return this.Project.save(this.config);
    };

    ShareProjectController.prototype.share = function() {
      var curProject, file, fileSelect, files, formData, requestURL, xhr, _i, _len,
        _this = this;
      if (!this.signedIn) {
        this.Alert.error("You must LOG IN in-order to share Recipe.");
        return;
      }
      curProject = angular.copy(this.config);
      requestURL = this.Baazar.domain + '/saveRecipe';
      fileSelect = document.getElementById('imgs');
      files = fileSelect.files;
      if (files.length < 2) {
        alert("please select atleast 2 files");
        return;
      }
      this.disableShareButton = true;
      formData = new FormData();
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        if (!file.type.match('image.*')) {
          continue;
        }
        formData.append('imgs', file, file.name);
      }
      formData.append('title', curProject.name);
      formData.append('desc', curProject.desc);
      formData.append('author', this.user._id);
      formData.append('ingredients', JSON.stringify(curProject));
      xhr = new XMLHttpRequest();
      xhr.open('POST', requestURL, true);
      xhr.onload = function() {
        var response;
        if (xhr.status === 200) {
          response = JSON.parse(xhr.responseText);
          return _this.scope.$apply(function() {
            return _this.handle_response(response);
          });
        } else {
          return _this.scope.$apply(function() {
            _this.disableShareButton = false;
            resetFileInput();
            return _this.Alert.error("An Army of heavily trained monkeys is dispatched to deal with this situation....hang in there....");
          });
        }
      };
      return xhr.send(formData);
    };

    ShareProjectController.prototype.getUserInfo = function() {
      var _this = this;
      return this.gp.getUserInfo().then(function(user) {
        _this.user = user;
        return _this.signedIn = true;
      }, function() {
        return _this.gp.signOut();
      });
    };

    ShareProjectController.prototype.deleteUserInfo = function() {
      this.user = null;
      return this.signedIn = false;
    };

    return ShareProjectController;

  })();

  MonkeyWrench.controller('ShareProjectController', ShareProjectController);

}).call(this);
