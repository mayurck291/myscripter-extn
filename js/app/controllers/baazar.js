// Generated by CoffeeScript 1.3.3
(function() {
  var BaazarController, MonkeyWrench,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MonkeyWrench = angular.module('MonkeyWrench');

  BaazarController = (function() {

    BaazarController.$inject = ['$scope', '$routeParams', '$timeout', '$route', 'Baazar', 'recipes', 'GPauth', 'Alert', 'Project'];

    function BaazarController(scope, routeParams, timeout, route, Baazar, recipes, gp, Alert, Project) {
      var reload,
        _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.timeout = timeout;
      this.route = route;
      this.Baazar = Baazar;
      this.recipes = recipes;
      this.gp = gp;
      this.Alert = Alert;
      this.Project = Project;
      this.install = __bind(this.install, this);

      this.postComment = __bind(this.postComment, this);

      this.karma = __bind(this.karma, this);

      this.disableKarmaSubmit = __bind(this.disableKarmaSubmit, this);

      this.rate = __bind(this.rate, this);

      this.deleteUserInfo = __bind(this.deleteUserInfo, this);

      this.getUserInfo = __bind(this.getUserInfo, this);

      /* fucking masonary sucks
      */

      reload = localStorage.getItem('reload');
      if ((reload != null) && reload === "true") {
        console.log("will reload");
        localStorage.setItem('reload', false);
        window.location.reload();
      }
      /* fucking masonary sucks
      */

      this.scope.recipes = recipes;
      this.gp.load().then(function() {
        return _this.getUserInfo();
      }, function() {
        _this.scope.user = null;
        return _this.scope.signedIn = false;
      });
      this.scope.cf = {};
      this.scope.cf.usercomment = null;
      this.scope.show = {};
      this.scope.show.dokarma = false;
      this.scope.show.docomment = false;
      this.scope.getStars = this.getStars;
      this.scope.getRemStars = this.getRemStars;
      this.scope.rate = this.rate;
      this.scope.fm = {};
      this.scope.karma = this.karma;
      this.scope.postComment = this.postComment;
      this.scope.disableKarmaSubmit = this.disableKarmaSubmit;
      this.scope.install = this.install;
      this.scope.disableInstall = false;
      this.scope.$on('login', this.getUserInfo);
      this.scope.$on('logout', this.deleteUserInfo);
      this.timeout(function() {
        return _this.scope.$apply(function() {
          var allTabs, gg, tab, tabs, _i, _len;
          allTabs = document.getElementsByClassName('tabs');
          console.log(allTabs);
          for (_i = 0, _len = allTabs.length; _i < _len; _i++) {
            tabs = allTabs[_i];
            tab = new CBPFWTabs(tabs);
          }
          localStorage.setItem('reload', true);
          return gg = new CBPGridGallery(document.getElementById('grid-gallery'));
        });
      }, 1000, true);
    }

    BaazarController.prototype.getStars = function(range) {
      var _i, _results;
      if (range != null) {
        return (function() {
          _results = [];
          for (var _i = 1; 1 <= range ? _i <= range : _i >= range; 1 <= range ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      } else {
        return [];
      }
    };

    BaazarController.prototype.getRemStars = function(range) {
      var _i, _results;
      if (range === void 0) {
        return range = 1;
      } else if (range === 5) {
        return [];
      } else {
        range += 1;
        return (function() {
          _results = [];
          for (var _i = range; range <= 5 ? _i <= 5 : _i >= 5; range <= 5 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      }
    };

    BaazarController.prototype.getUserInfo = function() {
      var _this = this;
      return this.gp.getUserInfo().then(function(user) {
        _this.scope.user = user;
        return _this.scope.signedIn = true;
      }, function() {
        return _this.gp.signOut();
      });
    };

    BaazarController.prototype.deleteUserInfo = function() {
      this.scope.user = null;
      return this.scope.signedIn = false;
    };

    BaazarController.prototype.rate = function(star) {
      if (this.scope.fm === null || this.scope.fm === void 0) {
        this.scope.fm = {};
      }
      return this.scope.fm.karma = star;
    };

    BaazarController.prototype.disableKarmaSubmit = function() {
      if ((this.scope.fm != null) && (this.scope.fm.karma != null) && (this.scope.fm.body != null)) {
        return false;
      } else {
        return true;
      }
    };

    BaazarController.prototype.karma = function(recipe) {
      var _this = this;
      this.Baazar.giveKarmaToRecipe(this.scope.user._id, recipe['_id']['_id'], this.scope.fm.karma, this.scope.fm.body).then(function() {
        var found, i, karma, obj, _i, _len, _ref;
        found = false;
        _ref = recipe.karma;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          karma = _ref[i];
          if (karma.user._id === _this.scope.user._id) {
            recipe.karma[i].body = _this.scope.fm.body;
            recipe.karma[i].karma = _this.scope.fm.karma;
            found = true;
          }
        }
        if (!found) {
          obj = {
            karma: _this.scope.fm.karma,
            user: {
              _id: _this.scope.user._id,
              img: _this.scope.user.img,
              name: _this.scope.user.name
            },
            body: _this.scope.fm.body
          };
          recipe.karma.unshift(obj);
        }
        _this.scope.fm.karma = 1;
        _this.scope.fm.body = null;
        _this.scope.show.dokarma = false;
        return _this.Alert.success('Yeah ....!!..');
      }, function() {
        _this.Alert.error('Failed to update.Try later...:(');
        _this.scope.fm.karma = 1;
        _this.scope.fm.body = null;
        _this.scope.show.dokarma = false;
      });
    };

    BaazarController.prototype.postComment = function(recipe) {
      var _this = this;
      return this.Baazar.postComment(recipe['_id']['_id'], this.scope.user._id, this.scope.cf.usercomment).then(function() {
        var obj;
        obj = {
          user: {
            _id: _this.scope.user._id,
            img: _this.scope.user.img,
            name: _this.scope.user.name
          },
          body: _this.scope.cf.usercomment,
          date: Date.now()
        };
        recipe._id.comments.push(obj);
        _this.scope.show.docomment = false;
        _this.scope.cf.usercomment = null;
        return _this.Alert.success('Yeah ....!!..');
      }, function() {
        _this.Alert.error('Failed to update.Try later...:(');
        _this.scope.show.docomment = false;
        return _this.scope.cf.usercomment = null;
      });
    };

    BaazarController.prototype.install = function(recipeInfo) {
      var id,
        _this = this;
      id = recipeInfo._id._id;
      this.showLoader = true;
      this.scope.disableInstall = true;
      return this.Baazar.getRecipe(id).then(function(recipe) {
        var found, user, _i, _len, _ref;
        recipe.forked = true;
        recipe.favourited = false;
        recipe._id = id;
        _this.scope.disableInstall = false;
        _this.Project.save(recipe);
        _this.Alert.success("Yeahh...!! recipe installed.");
        found = false;
        if (_this.scope.signedIn) {
          _ref = recipeInfo.users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            user = _ref[_i];
            if (user._id === _this.scope.user._id) {
              found = true;
              return;
            }
          }
          if (!found) {
            user = {
              _id: _this.scope.user._id,
              img: _this.scope.user.img,
              name: _this.scope.user.name
            };
            recipeInfo.users.push(user);
            recipeInfo.userc += 1;
          }
          return _this.Baazar.incUsersRecipes(_this.scope.user._id, id);
        }
      }, function() {
        return _this.Alert.error("An army of heavily trained monkeys is dispatched to deal with this situation...hang in there...");
      });
    };

    return BaazarController;

  })();

  MonkeyWrench.controller('BaazarController', BaazarController);

}).call(this);
