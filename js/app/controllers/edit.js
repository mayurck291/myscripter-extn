// Generated by CoffeeScript 1.3.3
(function() {
  var EditProjectController, MonkeyWrench;

  MonkeyWrench = angular.module('MonkeyWrench');

  EditProjectController = (function() {

    EditProjectController.$inject = ['$scope', '$routeParams', '$timeout', '$location', 'Baazar', 'Project', 'Alert'];

    function EditProjectController(scope, routeParams, timeout, location, Baazar, Project, Alert) {
      var pid,
        _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.timeout = timeout;
      this.location = location;
      this.Baazar = Baazar;
      this.Project = Project;
      this.Alert = Alert;
      pid = this.routeParams.pid;
      if (pid !== null && pid !== void 0) {
        this.config = this.Project.get(pid);
      } else {
        this.location.path('/');
      }
      if (this.config === null || this.config === void 0) {
        this.location.path('/');
      }
      if (this.config.forked) {
        this.location.path('/');
        this.Alert.error('Opps...can not edit installed Recipe...instead FORK it and then make it AWESOME.');
      }
      this.oldurl = this.config.url;
      this.timeout(function() {
        var cbtab, tabs;
        tabs = new CBPFWTabs(document.getElementById('form'));
        return cbtab = new CBPFWTabs(tabs);
      }, 300, true);
      this.scope.$on('save', this.save);
      return;
    }

    EditProjectController.prototype.save = function() {
      this.Project.save(angular.copy(this.config), this.oldurl);
      return this.Alert.success("Hurrah....project saved...");
    };

    EditProjectController.prototype["delete"] = function(project) {
      if (confirm("Are you sure you want to delete recipe " + project.name + " ?")) {
        this.Project["delete"](angular.copy(project));
        this.Alert.success("Recipe " + project.name + " deleted...");
        this.config = {};
        return this.location.path('/');
      }
    };

    EditProjectController.prototype.removejs = function(index) {
      return this.config.external.js.splice(index, 1);
    };

    EditProjectController.prototype.addjs = function() {
      if (this.config.external.js.indexOf(this.scope.extjs) === -1 && this.scope.extjs !== null && this.scope.extjs !== void 0) {
        this.config.external.js.push(this.scope.extjs);
      }
      return this.scope.extjs = null;
    };

    EditProjectController.prototype.removecss = function(index) {
      return this.config.external.css.splice(index, 1);
    };

    EditProjectController.prototype.addcss = function() {
      if (this.config.external.css.indexOf(this.scope.extcss) === -1 && this.scope.extcss !== null && this.scope.extcss !== void 0) {
        this.config.external.css.push(this.scope.extcss);
      }
      return this.scope.extcss = null;
    };

    EditProjectController.prototype.moveUp = function(index, array) {
      var temp;
      temp = array[index];
      array[index] = array[index - 1];
      return array[index - 1] = temp;
    };

    EditProjectController.prototype.moveDown = function(index, array) {
      var temp;
      temp = array[index];
      array[index] = array[index + 1];
      return array[index + 1] = temp;
    };

    return EditProjectController;

  })();

  MonkeyWrench.controller('EditProjectController', EditProjectController);

}).call(this);
