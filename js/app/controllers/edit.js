// Generated by CoffeeScript 1.7.1
var EditProjectController, MonkeyWrench,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

MonkeyWrench = angular.module('MonkeyWrench');

EditProjectController = (function() {
  EditProjectController.$inject = ['$scope', '$routeParams', '$timeout', '$location', 'Baazar', 'Project', 'Alert'];

  function EditProjectController(scope, routeParams, timeout, location, Baazar, Project, Alert) {
    var pid;
    this.scope = scope;
    this.routeParams = routeParams;
    this.timeout = timeout;
    this.location = location;
    this.Baazar = Baazar;
    this.Project = Project;
    this.Alert = Alert;
    this.addcss = __bind(this.addcss, this);
    this.removecss = __bind(this.removecss, this);
    this.addjs = __bind(this.addjs, this);
    this.removejs = __bind(this.removejs, this);
    this["delete"] = __bind(this["delete"], this);
    this.save = __bind(this.save, this);
    pid = this.routeParams.pid;
    if (pid !== null && pid !== void 0) {
      this.scope.curProject = this.Project.get(pid);
    } else {
      this.location.path('/');
    }
    if (this.scope.curProject === null || this.scope.curProject === void 0) {
      this.location.path('/');
    }
    if (this.scope.curProject.forked) {
      this.location.path('/');
      this.Alert.error('Opps...can not edit installed Recipe...instead FORK it and then make it AWESOME.');
    }
    this.scope.oldurl = this.scope.curProject.url;
    this.timeout((function(_this) {
      return function() {
        var cbtab, tabs;
        tabs = new CBPFWTabs(document.getElementById('form'));
        return cbtab = new CBPFWTabs(tabs);
      };
    })(this), 300, true);
    this.scope.save = this.save;
    this.scope["delete"] = this["delete"];
    this.scope.removecss = this.removecss;
    this.scope.removejs = this.removejs;
    this.scope.addjs = this.addjs;
    this.scope.addcss = this.addcss;
    this.scope.$on('save', this.save);
    return;
  }

  EditProjectController.prototype.save = function() {
    console.log("saving....");
    this.Project.save(angular.copy(this.scope.curProject), this.scope.oldurl);
    return this.Alert.success("Hurrah....project saved...");
  };

  EditProjectController.prototype["delete"] = function(project) {
    if (confirm("Are you sure you want to delete recipe " + project.name + " ?")) {
      this.Project["delete"](angular.copy(project));
      this.Alert.success("Recipe " + project.name + " deleted...");
      this.scope.curProject = {};
      return this.location.path('/');
    }
  };

  EditProjectController.prototype.removejs = function(index) {
    return this.scope.curProject.external.js.splice(index, 1);
  };

  EditProjectController.prototype.addjs = function() {
    if (this.scope.curProject.external.js.indexOf(this.scope.extjs) === -1 && this.scope.extjs !== null && this.scope.extjs !== void 0) {
      this.scope.curProject.external.js.push(this.scope.extjs);
    }
    return this.scope.extjs = null;
  };

  EditProjectController.prototype.removecss = function(index) {
    return this.scope.curProject.external.css.splice(index, 1);
  };

  EditProjectController.prototype.addcss = function() {
    if (this.scope.curProject.external.css.indexOf(this.scope.extcss) === -1 && this.scope.extcss !== null && this.scope.extcss !== void 0) {
      this.scope.curProject.external.css.push(this.scope.extcss);
    }
    return this.scope.extcss = null;
  };

  return EditProjectController;

})();

MonkeyWrench.controller('EditProjectController', EditProjectController);
