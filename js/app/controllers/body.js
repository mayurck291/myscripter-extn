// Generated by CoffeeScript 1.3.3
(function() {
  var BodyController, MonkeyWrench,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MonkeyWrench = angular.module('MonkeyWrench');

  BodyController = (function() {

    BodyController.$inject = ['$scope', '$routeParams', '$location', 'Baazar', 'GPauth', 'Alert', 'Project'];

    function BodyController(scope, routeParams, location, Baazar, gp, Alert, Project) {
      var id, ids, project_url, projects, _i, _len, _ref, _ref1,
        _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.location = location;
      this.Baazar = Baazar;
      this.gp = gp;
      this.Alert = Alert;
      this.Project = Project;
      this.edit = __bind(this.edit, this);

      this.save = __bind(this.save, this);

      this.signOut = __bind(this.signOut, this);

      this.signIn = __bind(this.signIn, this);

      this.getUserInfo = __bind(this.getUserInfo, this);

      this.scope.alert = this.Alert.bind();
      this.scope.signIn = this.signIn;
      this.scope.signOut = this.signOut;
      projects = this.Project.getAll();
      this.scope.projectIds = [];
      for (project_url in projects) {
        ids = projects[project_url];
        (_ref = this.scope.projectIds).push.apply(_ref, ids);
      }
      this.scope.allProjects = [];
      _ref1 = this.scope.projectIds;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        this.scope.allProjects.push(Project.get(id));
      }
      this.gp.load().then(function() {
        return _this.getUserInfo();
      }, function() {
        _this.scope.user = null;
        _this.scope.signedIn = false;
        return console.log("User not signed in");
      });
      setTimeout(function() {
        var cbtab, tabs;
        tabs = new CBPFWTabs(document.getElementById('home'));
        return cbtab = new CBPFWTabs(tabs);
      }, 300);
      this.scope.save = this.save;
      this.scope.edit = this.edit;
      return;
    }

    BodyController.prototype.getUserInfo = function() {
      var _this = this;
      return this.gp.getUserInfo().then(function(user) {
        _this.scope.user = user;
        return _this.scope.signedIn = true;
      }, function() {
        return _this.gp.signOut();
      });
    };

    BodyController.prototype.signIn = function() {
      var _this = this;
      console.log(this.gp);
      console.log("signing in .....");
      this.Alert.warning("Loading...........:)");
      this.gp.signIn().then(function() {
        return _this.getUserInfo();
      }, function(error) {
        return console.log(error);
      });
    };

    BodyController.prototype.signOut = function() {
      var _this = this;
      console.log("signing out.....");
      this.gp.signOut().then(function() {
        return console.log("out");
      }, function() {
        return console.log("not out");
      });
      this.scope.user = null;
      this.scope.signedIn = false;
    };

    BodyController.prototype.save = function(project) {
      project.enabled = !project.enabled;
      this.Project.save(project);
      return this.Alert.success("Hurray.....Recipe saved...");
    };

    BodyController.prototype.edit = function(project) {
      var p;
      if (project.forked) {
        return this.Alert.error("Can't edit installed Recipe.....instead FORK it...");
      } else {
        p = "/Edit/" + project.id;
        console.log("path is " + p);
        return this.location.path(p);
      }
    };

    return BodyController;

  })();

  MonkeyWrench.controller('BodyController', BodyController);

}).call(this);
