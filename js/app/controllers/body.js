// Generated by CoffeeScript 1.3.3
(function() {
  var BodyController, MonkeyWrench,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MonkeyWrench = angular.module('MonkeyWrench');

  BodyController = (function() {

    BodyController.$inject = ['$scope', '$routeParams', '$timeout', '$location', 'Baazar', 'GPauth', 'Alert', 'Project'];

    function BodyController(scope, routeParams, timeout, location, Baazar, gp, Alert, Project) {
      var _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.timeout = timeout;
      this.location = location;
      this.Baazar = Baazar;
      this.gp = gp;
      this.Alert = Alert;
      this.Project = Project;
      this.help = __bind(this.help, this);

      this.baazar = __bind(this.baazar, this);

      this["new"] = __bind(this["new"], this);

      this.home = __bind(this.home, this);

      this.signOut = __bind(this.signOut, this);

      this.signIn = __bind(this.signIn, this);

      this.getUserInfo = __bind(this.getUserInfo, this);

      this.scope.alert = this.Alert.bind();
      this.scope.signIn = this.signIn;
      this.scope.signOut = this.signOut;
      this.gp.load().then(function() {
        return _this.getUserInfo();
      }, function() {
        _this.scope.user = null;
        _this.scope.signedIn = false;
        return console.log("User not signed in");
      });
      this.scope.home = this.home;
      this.scope["new"] = this["new"];
      this.scope.baazar = this.baazar;
      this.scope.help = this.help;
      this.scope.$on('$routeChangeStart', function(next, current) {
        console.log("loading.......");
        return _this.scope.showLoader = true;
      });
      this.scope.$on('$routeChangeSuccess', function(next, current) {
        console.log("end.......");
        return _this.scope.showLoader = false;
      });
      this.scope.$on('$routeChangeError', function(next, current) {
        console.log("end.......");
        return _this.scope.showLoader = false;
      });
      return;
    }

    BodyController.prototype.getUserInfo = function() {
      var _this = this;
      return this.gp.getUserInfo().then(function(user) {
        _this.scope.user = user;
        return _this.scope.signedIn = true;
      }, function() {
        return _this.gp.signOut();
      });
    };

    BodyController.prototype.signIn = function() {
      var _this = this;
      console.log(this.gp);
      console.log("signing in .....");
      this.Alert.warning("Loading...........:)");
      this.gp.signIn().then(function() {
        return _this.getUserInfo();
      }, function(error) {
        return console.log(error);
      });
    };

    BodyController.prototype.signOut = function() {
      var _this = this;
      console.log("signing out.....");
      this.gp.signOut().then(function() {
        return console.log("out");
      }, function() {
        return console.log("not out");
      });
      this.scope.user = null;
      this.scope.signedIn = false;
    };

    BodyController.prototype.home = function() {
      document.getElementsByTagName('body')[0].click();
      return this.location.path('/');
    };

    BodyController.prototype["new"] = function() {
      document.getElementsByTagName('body')[0].click();
      return this.location.path('/New');
    };

    BodyController.prototype.baazar = function() {
      document.getElementsByTagName('body')[0].click();
      return this.location.path('/Baazar');
    };

    BodyController.prototype.help = function() {
      document.getElementsByTagName('body')[0].click();
      return this.location.path('/Help');
    };

    return BodyController;

  })();

  MonkeyWrench.controller('BodyController', BodyController);

}).call(this);
