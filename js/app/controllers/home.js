// Generated by CoffeeScript 1.3.3
(function() {
  var HomeController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HomeController = (function() {

    HomeController.$inject = ['$scope', '$routeParams', '$timeout', '$location', 'Baazar', 'GPauth', 'Alert', 'Project'];

    function HomeController(scope, routeParams, timeout, location, Baazar, gp, Alert, Project) {
      var _this = this;
      this.scope = scope;
      this.routeParams = routeParams;
      this.timeout = timeout;
      this.location = location;
      this.Baazar = Baazar;
      this.gp = gp;
      this.Alert = Alert;
      this.Project = Project;
      this.getUserInfo = __bind(this.getUserInfo, this);

      this.getAllProjects();
      this.gp.load().then(function() {
        return _this.getUserInfo();
      }, function() {
        _this.user = null;
        _this.signedIn = false;
        return console.log("User not signed in");
      });
      this.timeout(function() {
        var cbtab, tabs;
        tabs = document.getElementById('home');
        return cbtab = new CBPFWTabs(tabs);
      }, 100, true);
      this.scope.$on('login', this.getUserInfo);
      this.scope.$on('logout', this.deleteUserInfo);
      return;
    }

    HomeController.prototype.getAllProjects = function() {
      var id, ids, project_url, projects, _i, _len, _ref, _ref1;
      projects = this.Project.getAll();
      this.projectIds = [];
      for (project_url in projects) {
        ids = projects[project_url];
        (_ref = this.projectIds).push.apply(_ref, ids);
      }
      this.allProjects = [];
      _ref1 = this.projectIds;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        id = _ref1[_i];
        this.allProjects.push(this.Project.get(id));
      }
    };

    HomeController.prototype.getUserInfo = function() {
      var _this = this;
      this.gp.getUserInfo().then(function(user) {
        _this.user = user;
        return _this.signedIn = true;
      }, function() {
        return _this.gp.signOut();
      });
    };

    HomeController.prototype.deleteUserInfo = function() {
      this.user = null;
      return this.signedIn = false;
    };

    HomeController.prototype.save = function(project) {
      project.enabled = !project.enabled;
      return this.Project.save(project);
    };

    HomeController.prototype.edit = function(project) {
      var p;
      if (project.forked) {
        return this.Alert.error("Can't edit installed Recipe.....instead FORK it...");
      } else {
        p = "/Edit/" + project.id;
        console.log("path is " + p);
        return this.location.path(p);
      }
    };

    HomeController.prototype.fork = function(project) {
      var forked;
      forked = angular.copy(project);
      if (project.forked && (project._id != null)) {
        this.Baazar.forked(project._id);
      }
      forked.forked = false;
      forked.name += " (forked)";
      delete forked.id;
      if (forked._id != null) {
        delete forked._id;
      }
      if (forked.desc != null) {
        delete forked.desc;
      }
      this.Project.save(forked);
      this.Alert.success("Successfully forked ");
      return this.getAllProjects();
    };

    HomeController.prototype.share = function(project) {
      var p;
      if (project.forked) {
        return this.Alert.error("Can't share installed Recipe.....");
      } else if (!this.scope.signedIn) {
        return this.Alert.error("You must Log In to share Recipe....");
      } else {
        p = "/Share/" + project.id;
        return this.location.path(p);
      }
    };

    HomeController.prototype["delete"] = function(project) {
      if (confirm("Are you sure you want to delete recipe \n '" + project.name + "' ?")) {
        this.Project["delete"](angular.copy(project));
        return this.getAllProjects();
      }
    };

    HomeController.prototype.importProject = function(project) {
      if (this.Project.isValidProject(project)) {
        project = angular.fromJson(project);
        project.forked = false;
        project.name += " (imported)";
        if (project.id != null) {
          delete project.id;
        }
        if (project._id != null) {
          delete project._id;
        }
        this.Alert.success("Successfully imported recipe ...! " + project.name + " will appear in 'My Recipes'");
        this.Project.save(project);
        return this.getAllProjects();
      } else {
        return this.Alert.error("Not a valid Recipe...!!");
      }
    };

    HomeController.prototype.favourite = function(recipe) {
      var _this = this;
      if (recipe._id != null) {
        return this.Baazar.favourite(this.user._id, recipe.id).then(function() {
          recipe.favourited = true;
          return _this.Project.save(recipe);
        }, function() {
          return Alert.error("An army of heavily trained monkeys is dispatched to deal with situation...hang in there...!!");
        });
      } else {
        return this.Alert.error("You thought we are that dumb....!! Move on dude...");
      }
    };

    HomeController.prototype.unfavourite = function(recipe) {
      var _this = this;
      if (recipe._id != null) {
        return this.Baazar.unfavourite(this.user._id, recipe.id).then(function() {
          recipe.favourited = false;
          return _this.Project.save(recipe);
        }, function() {
          return Alert.error("An army of heavily trained monkeys is dispatched to deal with situation...hang in there...!!");
        });
      } else {
        return this.Alert.error("You thought we are that dumb....!! Move on dude...");
      }
    };

    return HomeController;

  })();

  MonkeyWrench.controller('HomeController', HomeController);

}).call(this);
