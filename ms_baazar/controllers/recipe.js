// Generated by CoffeeScript 1.3.3
(function() {
  var Meta, Recipe, async, imgur, insertMetaInfo, logger, path, updateImageLinksInMongo, uploadImagesToImgur;

  Recipe = require('../models/recipe');

  Meta = require('../models/meta');

  imgur = require('imgur-upload');

  async = require('async');

  logger = require('../utils/logger');

  path = require('path');

  imgur.setClientID('8ef66eb1ddce0cf');

  uploadImagesToImgur = function(files, doneCallback) {
    var asyncTasks, everythingDone, filePaths, img, links, _i, _len;
    logger.info("Trying to upload images to imgur");
    filePaths = [];
    links = [];
    asyncTasks = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      img = files[_i];
      filePaths.push(img.path);
    }
    everythingDone = function() {
      logger.info("doneCallback multiple File upload");
      doneCallback(links);
    };
    logger.info("async started => upload images to imgur");
    async.each(filePaths, function(filePath, callback) {
      imgur.upload(filePath, function(error, response) {
        if (!error && typeof response === "object") {
          links.push(response.data.link);
        } else {
          logger.error("Error uploading file", error, response);
        }
        callback();
      });
    }, everythingDone);
  };

  updateImageLinksInMongo = function(recipe, links) {
    var conditions, options, update;
    conditions = {
      author: recipe.author,
      'ingredients.url': recipe.ingredients.url
    };
    update = {
      "$set": {
        imgs: links
      }
    };
    options = {};
    Recipe.update(conditions, update, options, function(error, noOfDocs) {
      return logger.info("yeah baby.....");
    });
  };

  exports.meta = function(request, recipe) {
    recipe = {
      "_id": request.params.id,
      "author": "parin2092@gmail.com"
    };
    return insertMetaInfo(recipe);
  };

  insertMetaInfo = function(recipe) {
    var meta;
    logger.info("[ insertMetaInfo ] [ START ]");
    meta = {
      _id: recipe._id,
      users: [recipe.author],
      karma: [
        {
          _id: recipe.author,
          karma: 8
        }
      ]
    };
    meta = new Meta(meta);
    logger.info("[ insertMetaInfo ] new meta is " + meta);
    logger.info("[ insertMetaInfo ] query for " + meta._id);
    return Meta.findById(meta._id, function(error, recipeMeta) {
      if (recipeMeta != null) {
        logger.info("[ insertMetaInfo ] [ END ] " + meta._id + " already there ");
        return;
      } else {
        logger.info("[ insertMetaInfo ] inserting new");
        meta.save(function(error, recipeMeta) {
          logger.info("[ insertMetaInfo ] [ END ] " + meta._id + " inserted new metainfo " + recipeMeta + " with " + error + " error");
        });
      }
    });
  };

  exports.saveRecipe = function(request, response) {
    var files, id, options, params, recipe, upsertDate;
    logger.info("[ saveRecipe ] [ START ]");
    params = request.body;
    files = request.files.imgs;
    recipe = params;
    recipe.ingredients = JSON.parse(recipe.ingredients);
    if (recipe.ingredients._id != null) {
      recipe._id = recipe.ingredients._id;
    }
    upsertDate = new Recipe(recipe);
    id = upsertDate._id;
    upsertDate = upsertDate.toObject();
    delete upsertDate._id;
    options = {
      upsert: true,
      'new': true
    };
    logger.info("[ saveRecipe ] do upsert query");
    Recipe.update({
      _id: id
    }, upsertDate, options, function(error, noOfUpdates) {
      var data, resDoc;
      logger.info("[ saveRecipe ] " + noOfUpdates + " docs updated with error : " + error + " ");
      if (!error) {
        logger.info("[ saveRecipe ] calling [ insertMetaInfo ]");
        insertMetaInfo(recipe);
        logger.info("[ saveRecipe ] 200 sending http response ");
        data = recipe.ingredients;
        data._id = id;
        resDoc = {
          response: "success",
          msg: "Successfully shared...",
          data: data
        };
        response.json(resDoc, 200);
        logger.info("[ saveRecipe ] 200 response sent ");
        logger.info("200 upload images to imgur");
        uploadImagesToImgur(files, function(links) {
          updateImageLinksInMongo(recipe, links);
        });
      } else {
        logger.error("[ saveRecipe ] hell no this is error : " + error);
        logger.error("[ saveRecipe ] 500 sending http response");
        error = {
          response: "error",
          msg: "Error sharing your recipe."
        };
        response.json(error, 500);
        logger.error("[ saveRecipe ] 500 response sent");
      }
      return;
      return logger.error("[ saveRecipe ] [ END ]");
    });
  };

  exports.list = function(req, res) {
    return Recipe.list(function(err, recipes) {
      return res.json(recipes);
    });
  };

  exports.newestRecipes = function(req, res) {
    return Recipe.newestRecipes(function(err, recipes) {
      logger.info(recipes);
      return res.json(recipes);
    });
  };

  exports.myRecipes = function(req, res) {
    var email;
    email = req.params.email;
    logger.info(email);
    return Recipe.myRecipes(email, function(err, docs) {
      logger.info(err, docs);
      return res.json(docs, 200);
    });
  };

}).call(this);
